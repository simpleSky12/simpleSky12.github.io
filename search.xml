<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>gulp构建工具</title>
    <url>/2020/04/15/gulp%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="gulp构建工具"><a href="#gulp构建工具" class="headerlink" title="gulp构建工具"></a>gulp构建工具</h1><h2 id="gulp-flow"><a href="#gulp-flow" class="headerlink" title="gulp flow"></a>gulp flow</h2><p>定义任务 》输入文件 》处理文件 》输出</p>
<p>处理文件中又细分很多其他的处理方式</p>
<p>适合小项目，快速的形成自动化编译</p>
<p>首先初始化项目 <strong>npm init -y</strong><br>**<br>安装gulp 插件 <strong>cnpm i gulp -D</strong><br>**<br>在package.json 中 定义打包命令<br><img src="http://qiniu.simplesky12.cn/img/1585480530585-15374560-cd3a-4e9c-aa51-e5e8edb1f74a.png" alt="image.png"></p>
<p>安装完成后，可以使用<strong>npx gulp -v</strong>查看gulp的版本号</p>
<p>这样我们就可以通过 <strong>npm run build</strong> 来执行gulp的打包命令</p>
<h2 id="gulp基本配置"><a href="#gulp基本配置" class="headerlink" title="gulp基本配置"></a>gulp基本配置</h2><h3 id="新建gulpfile-js-文件"><a href="#新建gulpfile-js-文件" class="headerlink" title="新建gulpfile.js 文件"></a>新建gulpfile.js 文件</h3><p><strong>gulpfile.js</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 压缩，混淆  js</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">js</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'this is js script task'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 对 scss 编译，输出 css 文件</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">css</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'this is styles script task'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 监听文件的变化</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">watcher</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 清除 dist 目录中的内容</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">clean</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.scripts = js;</span><br><span class="line">exports.styles = css;</span><br><span class="line">exports.default = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    console.log(<span class="string">'hello  gulp'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>执行命令 <strong>npx gulp –tasks</strong><br><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/656731/1585482862269-534f140b-396f-4bb3-ac26-cce852c5201a.png" alt="image.png"></strong></p>
<p>执行命令 <strong>npx gulp scripts</strong><br><img src="http://qiniu.simplesky12.cn/img/1585482950912-a730cf47-b595-4537-adc4-cfcd37461fb6.png" alt="image.png"></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><a href="https://gulpjs.com/plugins/" target="_blank" rel="noopener">gulp 的 plugin 地址</a></p>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><p><strong>gulp-uglify *<em>js代码混淆<br>*</em>gulp-rename</strong> 重命名<br><strong>del</strong> 清空输出目录 dist 的内容<br><strong>gulp-autoprefixer *<em>样式的预处理, 处理浏览器的前缀问题，解决样式的兼容性<br>*</em>gulp-sass</strong>  可以使用scss文件编写样式<br><strong>gulp-loader</strong>  使我们在引用插件时更加的方便</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> plugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)();</span><br><span class="line"></span><br><span class="line">plugins.jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</span><br></pre></td></tr></table></figure>


<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i gulp-sass gulp-autoprefixer gulp-load-plugins gulp-uglify del -D</span><br></pre></td></tr></table></figure>



<h2 id="gulp打包配置"><a href="#gulp打包配置" class="headerlink" title="gulp打包配置"></a>gulp打包配置</h2><h3 id="js配置"><a href="#js配置" class="headerlink" title="js配置"></a>js配置</h3><p>在gulpfile.js 中引入插件使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* src 表示入口文件所在位置</span><br><span class="line">* dest 表示输出的文件目录</span><br><span class="line">* series 表示执行方式 是串联</span><br><span class="line">* watch 表示开启监听</span><br><span class="line">* pipe 表示下一个执行环节</span><br><span class="line">* */</span><br><span class="line">const &#123;src, dest, series, watch&#125; = require(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line">const plugins = require(<span class="string">'gulp-load-plugins'</span>)();</span><br><span class="line"></span><br><span class="line">// 压缩，混淆  js</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">js</span></span>() &#123;</span><br><span class="line">    src(<span class="string">'js/*.js'</span>)</span><br><span class="line">        .pipe(plugins.uglify())</span><br><span class="line">        .pipe(dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.scripts = js;</span><br></pre></td></tr></table></figure>


<p>执行 <strong>npx gulp scripts</strong> 命令，来只执行 <strong>js()</strong>  方法</p>
<h3 id="处理tasks-not-complete警告"><a href="#处理tasks-not-complete警告" class="headerlink" title="处理tasks not complete警告"></a>处理tasks not complete警告</h3><p><img src="http://qiniu.simplesky12.cn/img/1585530512354-49fb81cb-1b37-4038-af6f-97bf3fd8116d.png" alt="image.png"><br>上面的红色警告是表示我们没有结束** js()** 的gulp flow 工作流 ，需要在js方法中传入 回调函数 <strong>cd()</strong>，然后在 最后一个<strong>pipe</strong>方法后 调用 cb(), 这里 cb 是callback的简称</p>
<p><img src="http://qiniu.simplesky12.cn/img/1585530712615-92a7ed61-34af-472e-a5ef-2d50d42c3514.png" alt="image.png"></p>
<p>再次执行 命令 *<em>npx gulp scripts, *</em>就没有刚刚的红色报错了。<br><img src="http://qiniu.simplesky12.cn/img/1585530807505-129d96a9-f697-4c03-8797-a6647ad6c417.png" alt="image.png"></p>
<h3 id="clean配置"><a href="#clean配置" class="headerlink" title="clean配置"></a>clean配置</h3><p>clean 的功能主要是每次编译前，清除dist目录</p>
<p><strong>gulpfile.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"><span class="comment">// 清除 dist 目录中的内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    del(<span class="string">'./dist'</span>);</span><br><span class="line">    cb();</span><br><span class="line">&#125;</span><br><span class="line">exports.clean = clean;</span><br></pre></td></tr></table></figure>


<p>执行命令 <strong>npx gulp clean</strong><br>根目录下的*<em>dist *</em>目录就会被删除</p>
<h3 id="CSS配置"><a href="#CSS配置" class="headerlink" title="CSS配置"></a>CSS配置</h3><p><strong>gulpfile.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;src, dest, series, watch&#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> plugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    src(<span class="string">'scss/*.scss'</span>)</span><br><span class="line">        <span class="comment">// 压缩输出的 样式文件的 代码</span></span><br><span class="line">        .pipe(plugins.sass(&#123;<span class="attr">outputStyle</span>: <span class="string">'compressed'</span>&#125;))</span><br><span class="line">        .pipe(plugins.autoprefixer(&#123;</span><br><span class="line">            casecade: <span class="literal">false</span>,</span><br><span class="line">            remove: <span class="literal">false</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">    cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.styles = css;</span><br></pre></td></tr></table></figure>


<p>css打包时还需要配置一下 <strong>package.json</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"browserslist"</span>: [</span><br><span class="line">    <span class="string">"last 2 Version"</span>,</span><br><span class="line">    <span class="string">"&gt; 2%"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行命令 <strong>npx gulp styles</strong><br><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/656731/1585559075724-db0c85c0-f2b2-4611-b0a7-6ba7fd9983fc.png" alt="image.png"></strong><br>**</p>
<h3 id="watch配置"><a href="#watch配置" class="headerlink" title="watch配置"></a>watch配置</h3><p><strong>gulpfile.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watcher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    watch(<span class="string">'js/*.js'</span>, js);</span><br><span class="line">    watch(<span class="string">'css/*.scss'</span>, css);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = series([</span><br><span class="line">    clean,</span><br><span class="line">    js,</span><br><span class="line">    css,</span><br><span class="line">    watcher</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>


<p>这次使用命令** npm run build**  来执行 *<em>exports.default *</em>命令</p>
<h2 id="热编译，浏览器自动刷新"><a href="#热编译，浏览器自动刷新" class="headerlink" title="热编译，浏览器自动刷新"></a>热编译，浏览器自动刷新</h2><p>首先安装依赖  browser-sync</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm i browser-sync -D</span><br></pre></td></tr></table></figure>


<p>在<strong>gulpfile.js</strong> 中引入并初始化** browser-sync**</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// server 任务</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">server</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    browserSync.init(&#123;</span><br><span class="line">        server: &#123;</span><br><span class="line">            baseDir: <span class="string">'./'</span>  <span class="comment">// 定义根目录位置，不需要编写 ./dist </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    cb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="http://qiniu.simplesky12.cn/img/1585556733539-284e5656-72ff-4414-9282-e490f20bd44a.png" alt="image.png"></p>
<h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reload = browserSync.reload;</span><br></pre></td></tr></table></figure>


<p><img src="http://qiniu.simplesky12.cn/img/1585556568582-355b7290-fafa-47d6-a01f-116b00ca69a6.png" alt="image.png"></p>
<p><img src="http://qiniu.simplesky12.cn/img/1585559148483-21b44d83-62bb-4793-bca0-18781f69939a.png" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>hexo+github自建博客</title>
    <url>/2020/04/13/hexo+github%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo-github自建博客"><a href="#hexo-github自建博客" class="headerlink" title="hexo+github自建博客"></a>hexo+github自建博客</h1><h2 id="安装基本环境"><a href="#安装基本环境" class="headerlink" title="安装基本环境"></a>安装基本环境</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo中文官网</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm add hexo-cli -g  //全局安装 hexo</span><br><span class="line"></span><br><span class="line">hexo init blog  //新建 blog 文件夹</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">hexo serve</span><br></pre></td></tr></table></figure>



<h2 id="部署所需环境配置"><a href="#部署所需环境配置" class="headerlink" title="部署所需环境配置"></a>部署所需环境配置</h2><p>安装 <code>hexo-deployer-git</code></p>
<p><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git的github地址</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>修改配置文件 <strong>_config.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">[branch]</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">[message]</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">[git</span> <span class="string">user]</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">[git</span> <span class="string">email]</span></span><br><span class="line">  <span class="attr">extend_dirs:</span> <span class="string">[extend</span> <span class="string">directory]</span></span><br><span class="line">  <span class="attr">ignore_hidden:</span> <span class="literal">false</span> <span class="comment"># default is true</span></span><br><span class="line">  <span class="attr">ignore_pattern:</span> <span class="string">regexp</span>  <span class="comment"># whatever file that matches the regexp will be ignored when deploying</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>repo</code></td>
<td align="left">库（Repository）地址</td>
<td align="left">常用ssh 地址，可以免密上传</td>
</tr>
<tr>
<td align="left"><code>branch</code></td>
<td align="left">分支名称</td>
<td align="left"><code>gh-pages</code> (GitHub) <code>coding-pages</code> (Coding.net) <code>master</code> (others)</td>
</tr>
<tr>
<td align="left">name</td>
<td align="left">github 用户名</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">email</td>
<td align="left">github 的登陆邮箱</td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="github-仓库设置"><a href="#github-仓库设置" class="headerlink" title="github 仓库设置"></a>github 仓库设置</h2><p><img src="http://qiniu.simplesky12.cn/img/image-20200413145357170.png" alt="image-20200413145357170"></p>
<p>新建的 github 仓库名称，要 以.github.io 结尾</p>
<p>创建仓库后，复制 ssh 链接</p>
<p><img src="http://qiniu.simplesky12.cn/img/image-20200413145557566.png" alt="image-20200413145557566"></p>
<p>将ssh链接 配置到 delopy下的 repo 中</p>
<h3 id="创建密钥对"><a href="#创建密钥对" class="headerlink" title="创建密钥对"></a>创建密钥对</h3><p>因为使用了ssh，所以需要用到密钥，创建密钥对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"905781330@qq.com"</span></span><br></pre></td></tr></table></figure>

<p>密钥生成后 将密钥配置到 github中，这样本地就可以使用ssh免密上传文件到 github中</p>
<p>配置完成后的文件内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:simpleSky12/simpleSky12.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">simpleSky12</span></span><br><span class="line">  <span class="attr">email:</span> <span class="number">905781330</span><span class="string">@qq.com</span></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>产生静态文件目录 public</p>
<p><img src="http://qiniu.simplesky12.cn/img/image-20200413151105032.png" alt="image-20200413151105032"></p>
<p>执行命令，部署静态文件到 github 上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<h2 id="解决图片无法显示"><a href="#解决图片无法显示" class="headerlink" title="解决图片无法显示"></a>解决图片无法显示</h2><p>安装新的插件 <code>hexo-asset-image</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm istall hexo-asset-image --save</span><br></pre></td></tr></table></figure>



<p>配置<code>_config.yml</code>里面的<code>post_asset_folder:false</code>这个选项设置为<code>true</code>。</p>
<h2 id="博客主题的使用"><a href="#博客主题的使用" class="headerlink" title="博客主题的使用"></a>博客主题的使用</h2><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo的所有主题地址</a></p>
<p><img src="http://qiniu.simplesky12.cn/img/image-20200413181451724.png" alt="image-20200413181451724"></p>
<p>我喜欢的一款主题 <a href="https://shen-yu.gitee.io/" target="_blank" rel="noopener">岛</a></p>
<p><a href="https://shen-yu.gitee.io/2019/ayer/" target="_blank" rel="noopener">使用说明文档</a></p>
]]></content>
  </entry>
  <entry>
    <title>Typora解决图片上传</title>
    <url>/2020/04/13/Typora%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Typora解决图片上传"><a href="#Typora解决图片上传" class="headerlink" title="Typora解决图片上传"></a>Typora解决图片上传</h1><p>首先开通七牛云</p>
<p>七牛云开通是免费送10G，存储空间的，不过需要自己的服务器结合使用，服务器也需要通过备案</p>
<h2 id="Typora设置"><a href="#Typora设置" class="headerlink" title="Typora设置"></a>Typora设置</h2><p>打开 Typora 的偏好设置</p>
<p><img src="http://qiniu.simplesky12.cn/img/image-20200413161850777.png" alt="image-20200413161850777"></p>
<p>选择 PicGo-core，然后下载插件，其他几个我没有试成功，放弃了</p>
<h2 id="PicGo-Core配置"><a href="#PicGo-Core配置" class="headerlink" title="PicGo-Core配置"></a>PicGo-Core配置</h2><p><a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#picbed-github" target="_blank" rel="noopener">PicGo-Core配置文档</a></p>
<p>还是打开偏好设置中的 图像，然后 点击打开配置文件</p>
<p><img src="http://qiniu.simplesky12.cn/img/image-20200413162248259.png" alt="image-20200413162248259"></p>
<h3 id="七牛云的详细配置"><a href="#七牛云的详细配置" class="headerlink" title="七牛云的详细配置"></a>七牛云的详细配置</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"picBed"</span>: &#123;</span><br><span class="line">    <span class="attr">"uploader"</span>: <span class="string">"qiniu"</span>,</span><br><span class="line">    <span class="attr">"qiniu"</span>: &#123;</span><br><span class="line">      <span class="attr">"accessKey"</span>: <span class="string">"XXXXXXX"</span>,</span><br><span class="line">      <span class="attr">"secretKey"</span>: <span class="string">"XXXX"</span>,</span><br><span class="line">      <span class="attr">"bucket"</span>: <span class="string">"存储空间名称"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"存储空间使用的域名"</span>,</span><br><span class="line">      <span class="attr">"area"</span>: <span class="string">"z2表示华南"</span>,</span><br><span class="line">      <span class="attr">"options"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"img/ 存放的路径位置"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"picgoPlugins"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="accessKey和secretKey-如何查找"><a href="#accessKey和secretKey-如何查找" class="headerlink" title="accessKey和secretKey 如何查找"></a>accessKey和secretKey 如何查找</h3><p>进入七牛云的个人中心的密钥管理中查找</p>
<p><img src="http://qiniu.simplesky12.cn/img/image-20200413162655557.png" alt="image-20200413162655557"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/13/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>小米商城vue部署</title>
    <url>/2020/04/13/%E5%B0%8F%E7%B1%B3%E5%95%86%E5%9F%8Evue%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="小米商城vue部署"><a href="#小米商城vue部署" class="headerlink" title="小米商城vue部署"></a>小米商城vue部署</h1><h2 id="nginx服务配置"><a href="#nginx服务配置" class="headerlink" title="nginx服务配置"></a>nginx服务配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成后可以查看安装位置</span></span><br><span class="line"><span class="built_in">which</span> nginx</span><br></pre></td></tr></table></figure>


<h3 id="检查nginx配置"><a href="#检查nginx配置" class="headerlink" title="检查nginx配置"></a>检查nginx配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line"><span class="comment"># 这个命令可以检查到 nginx 配置文件的所在位置</span></span><br></pre></td></tr></table></figure>
<p>重点关注 nginx.conf 文件中的 server配置</p>
<p>server 表示我们的服务器<br>server 下面的server_name 则是配置的域名<br>server 中的 location 下的 root 则表示 网站文件所在的目录</p>
<h3 id="nginx-的相关操作命令"><a href="#nginx-的相关操作命令" class="headerlink" title="nginx 的相关操作命令"></a>nginx 的相关操作命令</h3><p>nginx -s stop 停止nginx服务<br>nginx  开始nginx服务<br>nginx -s reload  重启nginx服务</p>
<h3 id="nginx-中主要server的配置"><a href="#nginx-中主要server的配置" class="headerlink" title="nginx 中主要server的配置"></a>nginx 中主要server的配置</h3><p>可以将 需要变动的 server配置单独提出来，写入一个新的文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在nginx 的目录下新建一个 vhost 目录</span></span><br><span class="line">mkdir vhost</span><br><span class="line"><span class="comment"># 进入vhost 目录 新建一个 mi_mall.conf 文件，存放配置</span></span><br><span class="line"><span class="built_in">cd</span> vhost/</span><br><span class="line">vim mi_mall.conf</span><br></pre></td></tr></table></figure>
<p>mi_mall.conf 文件中的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        root /workspace/mimall;</span><br><span class="line">        index index.html index.htm login.html;</span><br><span class="line"></span><br><span class="line">        location ^~/api/pay&#123;</span><br><span class="line">          proxy_pass http://116.63.142.208:5000/pay;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ^~/api/ &#123;</span><br><span class="line">          proxy_pass http://116.63.142.208:8000/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">          root /workspace/mimall;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(js|html|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">          root /workspace/mimall;</span><br><span class="line">          expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>保存退出后,进入 nginx的 nginx.conf 文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/conf/</span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure>


<p>添加一行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">include /etc/<span class="built_in">local</span>/nginx/vhost/*.conf;</span><br></pre></td></tr></table></figure>


<p><img src="http://qiniu.simplesky12.cn/img/1585108896352-55b68e59-d621-4641-8a15-e409ba565ce0.png" alt="image.png"></p>
<p>重载 nginx 服务配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>




<h2 id="node配置"><a href="#node配置" class="headerlink" title="node配置"></a>node配置</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://npm.taobao.org/mirrors/node/v12.14.0/node-v12.14.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf node-v12.14.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<p>-x 表示解压<br>-vf  在解压的过程中会显示解压的文件与路径<br>-zx 表示解压 .tar.gz 格式的压缩文件<br>解压缩文件： tar -zxvf 压缩文件名.tar.gz tar   -xvf 压缩文件名.tar</p>
<h3 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h3><p>配置 npm与node的 path环境变量路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>  <span class="comment">#查看系统的环境变量有哪些</span></span><br></pre></td></tr></table></figure>

<p><img src="http://qiniu.simplesky12.cn/img/1585107210778-bec136bc-35f5-4d49-8557-b5b4f5323152.png" alt="image.png"><br>创建node 和 npm 的软连接指向到 /usr/local/bin下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/node-v12/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/node-v12/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br><span class="line"><span class="comment"># 回到 /root路径下</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="built_in">source</span> .bash_profile //让配置生效</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>移动端适配方案</title>
    <url>/2020/04/13/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h1><p>定义相同的文字大小，但在不同的设备上应该展示不同的像素数</p>
<p><strong>rem</strong>: 相对于 *<em>html *</em>标签 元素 *<em>fontSize *</em>大小的单位</p>
<p>定义函数把像素px转化为 rem</p>
<h2 id="fontSize-计算规则"><a href="#fontSize-计算规则" class="headerlink" title="fontSize 计算规则"></a>fontSize 计算规则</h2><p>根据<strong>屏幕宽度  **动态的</strong> **定义 根元素 fontSize 大小</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义最大的 fontSize</span></span><br><span class="line"><span class="keyword">const</span> MAX_FONT_SIZE = <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 html 文档被解析完成的事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取 HTML 标签</span></span><br><span class="line">  <span class="keyword">const</span> html = <span class="built_in">document</span>.querySelector(<span class="string">'html'</span>)</span><br><span class="line">  <span class="comment">// 获取根元素 fontSize 标准，屏幕宽度除以10</span></span><br><span class="line">  <span class="keyword">let</span> fontSize = <span class="built_in">window</span>.innerWidth / <span class="number">10</span></span><br><span class="line">  <span class="comment">// 获取到的 fontSize 不允许超过我们设置的最大值</span></span><br><span class="line">  fontSize = fontSize &gt; MAX_FONT_SIZE ? MAX_FONT_SIZE : fontSize</span><br><span class="line">  <span class="comment">// 定义根元素 html 的 fontsize 大小，即 rem</span></span><br><span class="line">  html.style.fontSize = fontSize + <span class="string">'px'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>将该 js文件引入到 vue项目的入口 js文件中 <strong>main.js</strong><br>**<br><strong><img src="http://qiniu.simplesky12.cn/img/1585812674227-3a2d04d8-5c13-479c-aa5c-a2e07ae89a24.png" alt="image.png"></strong></p>
<h2 id="转化-px-为-rem的值"><a href="#转化-px-为-rem的值" class="headerlink" title="转化 px 为 rem的值"></a>转化 px 为 rem的值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义预计的根元素大小</span></span><br><span class="line">$rootFontSize: <span class="number">375</span>/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义像素转化为 rem 的函数</span></span><br><span class="line">@<span class="function"><span class="keyword">function</span> <span class="title">px2rem</span>(<span class="params">$px</span>)</span>&#123;</span><br><span class="line">  @<span class="keyword">return</span> $px/$rootFontSize + rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将 该scss 文件引入到** app.vue** 中<br><img src="http://qiniu.simplesky12.cn/img/1585812548860-02f36e86-74f3-4338-a954-c859a0f20d9d.png" alt="image.png"></p>
<p>后期其他vue页面中如果使用到了 px2rem() 则需要重新引入一下。</p>
<h2 id="配置-public-文件夹中-index-html"><a href="#配置-public-文件夹中-index-html" class="headerlink" title="配置 public 文件夹中 index.html"></a>配置 public 文件夹中 index.html</h2><p>我们需要在 HTML 文件的 head 标签中 加入 一个新的 meta 标签，内容如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum=1.0,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><img src="http://qiniu.simplesky12.cn/img/1585812841912-35650cc1-0ce2-4bfc-bfc5-db3b5ec7c503.png" alt="image.png"></p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>以 Home.vue 文件举例，演示 px2rem()  的用法<br><img src="http://qiniu.simplesky12.cn/img/1585812980853-1e76a136-acdf-4cd7-9d5f-052fa87d19a5.png" alt="image.png"></p>
]]></content>
  </entry>
</search>
